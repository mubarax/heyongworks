    /// <summary>
    /// 矩阵类
    /// </summary>
    /// <remarks> mk 20161003
    /// </remarks>
    /// 
    public sealed class Matrix
    {
        int rows, cols;            //矩阵的行列数
        double[,] data;            //矩阵的数据

        #region 构造函数
        public Matrix(int rowNum, int columnNum)
        {
            rows = rowNum;
            cols = columnNum;
            data = new double[rows, cols];
        }
        public Matrix(int rowNum, int colNum, int elem)
        {
            rows = rowNum;
            cols = colNum;
            data = new double[rows, cols];
            for (int i = 0; i < rowNum; i++)
                for (int j = 0; j < colNum; j++)
                    data[i, j] = elem;

        }
        public Matrix(double[,] members)
        {
            rows = members.GetUpperBound(0) + 1;
            cols = members.GetUpperBound(1) + 1;
            data = new double[rows, cols];
            Array.Copy(members, data, rows * cols);
        }
        public Matrix(double[] vector)
        {
            rows = 1;
            cols = vector.GetUpperBound(0) + 1;
            data = new double[1, cols];
            for (int i = 0; i < vector.Length; i++)
            {
                data[0, i] = vector[i];
            }
        }
        public Matrix(double[] vector, int rowNum, int colNum)
        {
            if (vector.Length != rowNum * colNum)
                return;
            rows = rowNum;
            cols = colNum;
            data = new double[rowNum, colNum];
            for (int i = 0; i < rowNum; i++){
                for (int j = 0; j < colNum; j++)
                    data[i, j] = vector[i*cols+ j];
            }
        }
        #endregion


        #region 属性和索引器
        public int rowNum {     get { return rows; } }
        public int columnNum {  get { return cols; } }

        public double this[int r, int c]
        {
            get { return data[r, c]; }
            set { data[r, c] = value; }
        }
        #endregion



        #region 转置
        /// <summary>
        /// 将矩阵转置，得到一个新矩阵（此操作不影响原矩阵）
        /// </summary>
        /// <param name="input">要转置的矩阵</param>
        /// <returns>原矩阵经过转置得到的新矩阵</returns>
        public static Matrix transpose(Matrix input)
        {
            double[,] inverseMatrix = new double[input.cols, input.rows];
            for (int r = 0; r < input.rows; r++)
                for (int c = 0; c < input.cols; c++)
                    inverseMatrix[c, r] = input[r, c];
            return new Matrix(inverseMatrix);
        }
        #endregion

        #region 计算行列式的值
        public static double Determinant(double[,] matrix)
        {
            if (matrix.GetLength(0) != matrix.GetLength(1))
                return 0;
            int N = matrix.GetLength(0);

            //二阶及以下行列式直接计算
            if (matrix.GetLength(0) == 0) return 0;
            else if (matrix.GetLength(0) == 1) return matrix[0,0];
            else if (matrix.GetLength(0) == 2)
                return matrix[0,0] * matrix[1,1] - matrix[0,1] * matrix[1,0];

            //对第一行使用“加边法”递归计算行列式的值
            double dSum = 0, dSign = 1;
            for (int i = 0; i < matrix.GetLength(1); i++){
                double[,] matrixTemp = new double[N-1,N-1];
                for (int j = 0; j < N-1; j++)
                    for (int k = 0; k < N-1; k++)
                        matrixTemp[j,k] = matrix[j + 1,k >= i ? k + 1 : k];

                dSum += (matrix[0,i] * dSign * Determinant(matrixTemp));
                dSign = dSign * -1;
            }
            return dSum;
        }

        // 计算方阵的伴随矩阵
        public static double[,] AdjointMatrix(double[,] matrix){
            //制作一个伴随矩阵大小的矩阵
            if( matrix.GetLength(0) != matrix.GetLength(1) ) return null;
            int N = matrix.GetLength(0);

            double[,] result = new double[N, N];

            //生成伴随矩阵
            for (int i = 0; i < N; i++){
                for (int j = 0; j < N; j++){
                    double[,] temp = new double[N - 1, N - 1]; //存储代数余子式的矩阵（行、列数都比原矩阵少1）

                    //生成代数余子式
                    for (int x = 0; x < N-1; x++)
                        for (int y = 0; y < N-1; y++)
                            temp[x,y] = matrix[x < i ? x : x + 1, y < j ? y : y + 1];

                    result[j, i] = ((i + j) % 2 == 0 ? 1 : -1) * Determinant(temp);
                }
            }
            return result;
        }
        // 求矩阵的逆矩阵
        public static double[,] InverseMatrix(double[,] matrix){
            if (matrix == null || matrix.GetLength(0) == 0 || matrix.GetLength(0) != matrix.GetLength(1) )
                return null;             //matrix必须为非空
            int N = matrix.GetLength(0);
            
            //计算矩阵行列式的值
            double dDeterminant = Determinant(matrix);
            if (Math.Abs(dDeterminant) <= 1E-6) return null;

            //制作一个伴随矩阵大小的矩阵
            double[,] result = AdjointMatrix(matrix);

            //矩阵的每项除以矩阵行列式的值，即为所求
            for (int i = 0; i < N; i++)
                for (int j = 0; j < N; j++)
                    result[i,j] /= dDeterminant;

            return result;
        }
        #endregion

        #region 得到行向量或者列向量
        public Matrix getRow(int r)
        {
            if (r > rows || r <= 0) return null;
            double[] a = new double[cols];
            Array.Copy(data, cols * (r - 1), a, 0, cols);
            Matrix m = new Matrix(a);
            return m;
        }
        public Matrix getColumn(int c)
        {
            if (c > cols || c < 0) return null;
            double[,] a = new double[rows, 1];
            for (int i = 0; i < rows; i++)
                a[i, 0] = data[i, c];
            return new Matrix(a);
        }
        #endregion

        #region 操作符重载  + - * / == != \
        public static Matrix operator +(Matrix a, Matrix b)
        {
            if (a.rows != b.rows || a.cols != b.cols)
                return null;
            Matrix result = new Matrix(a.rows, a.cols);
            for (int i = 0; i < a.rows; i++)
                for (int j = 0; j < a.cols; j++)
                    result[i, j] = a[i, j] + b[i, j];
            return result;
        }

        public static Matrix operator -(Matrix a, Matrix b)
        {
            return a + b * (-1);
        }

        public static Matrix operator *(Matrix matrix, double factor)
        {
            Matrix result = new Matrix(matrix.rows, matrix.cols);
            for (int i = 0; i < matrix.rows; i++)
                for (int j = 0; j < matrix.cols; j++)
                    matrix[i, j] *= factor;
            return matrix;
        }
        public static Matrix operator *(double factor, Matrix matrix)
        {
            return matrix * factor;
        }
        public static Matrix operator *(Matrix a, Matrix b)
        {
            if (a.cols != b.rows)
                return null;
            Matrix result = new Matrix(a.rows, b.cols);
            for (int i = 0; i < a.rows; i++)
                for (int j = 0; j < b.cols; j++)
                    for (int k = 0; k < a.cols; k++)
                        result[i, j] += a[i, k] * b[k, j];

            return result;
        }
        public static bool operator ==(Matrix a, Matrix b)
        {
            if (object.Equals(a, b)) return true;
            if (object.Equals(null, b))
                return a.Equals(b);
            return b.Equals(a);
        }
        public static bool operator !=(Matrix a, Matrix b)
        {
            return !(a == b);
        }
        public override bool Equals(object obj)
        {
            if (obj == null) return false;
            if (!(obj is Matrix)) return false;
            Matrix t = obj as Matrix;
            if (rows != t.rows || cols != t.cols) return false;
            return this.Equals(t, 10);
        }
        /// <summary>
        /// 按照给定的精度比较两个矩阵是否相等
        /// </summary>
        /// <param name="matrix">要比较的另外一个矩阵</param>
        /// <param name="precision">比较精度（小数位）</param>
        /// <returns>是否相等</returns>
        public bool Equals(Matrix matrix, int precision)
        {
            if (precision < 0) return false;// throw new MatrixException("小数位不能是负数");
            double test = Math.Pow(10.0, -precision);
            if (test < double.Epsilon)
                return false; // throw new MatrixException("所要求的精度太高，不被支持。");
            for (int r = 0; r < this.rows; r++)
                for (int c = 0; c < this.cols; c++)
                    if (Math.Abs(this[r, c] - matrix[r, c]) >= test)
                        return false;
            return true;
        }
        #endregion


        public static double[,] spdiags(double[,] basemat, int[] diagIndexs, int n)
        {
            double[,] res = new double[n, n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    res[i, j] = 0;


            for (int d = 0; d < diagIndexs.Length; d++)
            {
                int diagi = diagIndexs[d];
                int row = 0, col = d;

                if (diagi < 0)
                {
                    int ri = -diagi, rj = 0;
                    for (int r = 0; r < basemat.GetLength(0) + diagi; r++)
                        res[ri++, rj++] = basemat[r, d];

                }
                else if (diagi >= 0)
                {
                    int ri = 0, rj = diagi;
                    for (int r = diagi; r < basemat.GetLength(0); r++)
                        res[ri++, rj++] = basemat[r, d];

                }

            }

            for (int i = 0; i < res.GetLength(0); i++)
            {
                for (int j = 0; j < res.GetLength(1); j++)
                {
                    System.Console.Write(res[i, j].ToString() + "\t\t");
                }
                System.Console.Write("\n");
            }

            return res;
        }


        public void printMatrix() {
            for (int i = 0; i < data.GetLength(0); i++){
                for (int j = 0; j < data.GetLength(1); j++)
                    System.Console.Write(data[i, j].ToString() + "\t\t");
                System.Console.Write("\n");
            }
        }
        public static void printMatrix(double[,] mat)
        {
            for (int i = 0; i < mat.GetLength(0); i++){
                for (int j = 0; j < mat.GetLength(1); j++)
                    System.Console.Write(mat[i, j] + "\t\t");
                System.Console.Write("\n");
            }
        }

    }

